{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport axios from 'axios';\nexport default (() => Composed => {\n  var _temp;\n\n  return _temp = class extends Component {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"componentDidMount\", async () => {\n        const postsResponse = await axios.get('http://www.mocky.io/v2/5be5e3fa2f000082000fc3f8');\n        const authorResponse = await axios.get('http://www.mocky.io/v2/5be5e3ae2f00005b000fc3f6');\n        const posts = postsResponse.data.map(a => Object.assign(a, authorResponse.data.find(b => b.id === a.metadata.authorId)));\n        return {\n          pageProps: _objectSpread({}, pageProps, {\n            posts\n          })\n        };\n      });\n    }\n\n    static async getInitialProps(ctx) {\n      let pageProps = {};\n\n      if (Composed.getInitialProps) {\n        pageProps = await loadGetInitialProps(Composed, ctx);\n      }\n\n      return {\n        pageProps\n      };\n    }\n\n    render() {\n      const {\n        pageProps\n      } = this.props;\n      return __jsx(Composed, pageProps);\n    }\n\n  }, _temp;\n});","map":{"version":3,"sources":["/home/guisouzanl/Projetos/blog-pessoal/src/hocs/withPosts.js"],"names":["React","Component","loadGetInitialProps","axios","Composed","postsResponse","get","authorResponse","posts","data","map","a","Object","assign","find","b","id","metadata","authorId","pageProps","getInitialProps","ctx","render","props"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,gBAAe,MAAMC,QAAQ;AAAA;;AAAA,iBAC3B,cAAcH,SAAd,CAAwB;AAAA;AAAA;;AAAA,iDAUF,YAAY;AAC9B,cAAMI,aAAa,GAAG,MAAMF,KAAK,CAACG,GAAN,CAC1B,iDAD0B,CAA5B;AAGA,cAAMC,cAAc,GAAG,MAAMJ,KAAK,CAACG,GAAN,CAC3B,iDAD2B,CAA7B;AAIA,cAAME,KAAK,GAAGH,aAAa,CAACI,IAAd,CAAmBC,GAAnB,CAAuBC,CAAC,IACpCC,MAAM,CAACC,MAAP,CACEF,CADF,EAEEJ,cAAc,CAACE,IAAf,CAAoBK,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASL,CAAC,CAACM,QAAF,CAAWC,QAAlD,CAFF,CADY,CAAd;AAOA,eAAO;AAAEC,UAAAA,SAAS,oBAAOA,SAAP;AAAkBX,YAAAA;AAAlB;AAAX,SAAP;AACD,OA1BqB;AAAA;;AACtB,iBAAaY,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,UAAIF,SAAS,GAAG,EAAhB;;AAEA,UAAIf,QAAQ,CAACgB,eAAb,EAA8B;AAC5BD,QAAAA,SAAS,GAAG,MAAMjB,mBAAmB,CAACE,QAAD,EAAWiB,GAAX,CAArC;AACD;;AACD,aAAO;AAAEF,QAAAA;AAAF,OAAP;AACD;;AAoBDG,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEH,QAAAA;AAAF,UAAgB,KAAKI,KAA3B;AAEA,aAAO,MAAC,QAAD,EAAcJ,SAAd,CAAP;AACD;;AAhCqB,GADG;AAAA,CAA7B","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport axios from 'axios';\n\nexport default () => Composed =>\n  class extends Component {\n    static async getInitialProps(ctx) {\n      let pageProps = {};\n\n      if (Composed.getInitialProps) {\n        pageProps = await loadGetInitialProps(Composed, ctx);\n      }\n      return { pageProps };\n    }\n\n    componentDidMount = async () => {\n      const postsResponse = await axios.get(\n        'http://www.mocky.io/v2/5be5e3fa2f000082000fc3f8'\n      );\n      const authorResponse = await axios.get(\n        'http://www.mocky.io/v2/5be5e3ae2f00005b000fc3f6'\n      );\n\n      const posts = postsResponse.data.map(a =>\n        Object.assign(\n          a,\n          authorResponse.data.find(b => b.id === a.metadata.authorId)\n        )\n      );\n\n      return { pageProps: { ...pageProps, posts } };\n    };\n\n    render() {\n      const { pageProps } = this.props;\n\n      return <Composed {...pageProps} />;\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}