{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport App from 'next/app';\nimport axios from 'axios';\nimport GlobalStyle from '../styles/global';\nimport Header from '../components/Header/index';\nimport Footer from '../components/Footer/index';\nimport Newsletter from '../components/Newsletter/index';\nimport postContext from '../components/postContext';\nexport default class MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n      return {\n        pageProps\n      };\n    }\n\n    const postsResponse = await axios.get('http://www.mocky.io/v2/5be5e3fa2f000082000fc3f8');\n    const authorResponse = await axios.get('http://www.mocky.io/v2/5be5e3ae2f00005b000fc3f6');\n    const allPosts = postsResponse.data.map(a => Object.assign(a, authorResponse.data.find(b => b.id === a.metadata.authorId)));\n    let authors = allPosts.map(a => a.name);\n    authors = authors.filter((li, idx, self) => self.map(itm => itm + itm).indexOf(li + li) === idx);\n    const lastPosts = allPosts.slice(0, 3).map(a => a);\n    const lastPost = allPosts.slice(0, 1).map(a => a)[0];\n    const spotLight = allPosts.slice(0, 1).map(a => a)[0];\n    return {\n      pageProps,\n      allPosts,\n      authors,\n      lastPosts,\n      lastPost,\n      spotLight\n    };\n  }\n\n  render() {\n    const {\n      0: filter,\n      1: setFilter\n    } = useState('');\n    const {\n      Component,\n      pageProps,\n      allPosts,\n      authors,\n      lastPosts,\n      lastPost,\n      spotLight\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(GlobalStyle, null), __jsx(postContext.Provider, {\n      value: {\n        allPosts,\n        authors,\n        lastPosts,\n        lastPost,\n        spotLight,\n        filter,\n        setFilter\n      }\n    }, __jsx(Header, null), __jsx(Component, pageProps), __jsx(Newsletter, null), __jsx(Footer, null)));\n  }\n\n}","map":{"version":3,"sources":["/home/guisouzanl/Projetos/blog-pessoal/pages/_app.js"],"names":["React","useState","App","axios","GlobalStyle","Header","Footer","Newsletter","postContext","MyApp","getInitialProps","Component","ctx","pageProps","postsResponse","get","authorResponse","allPosts","data","map","a","Object","assign","find","b","id","metadata","authorId","authors","name","filter","li","idx","self","itm","indexOf","lastPosts","slice","lastPost","spotLight","render","setFilter","props"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport App from 'next/app';\nimport axios from 'axios';\nimport GlobalStyle from '../styles/global';\nimport Header from '../components/Header/index';\nimport Footer from '../components/Footer/index';\nimport Newsletter from '../components/Newsletter/index';\nimport postContext from '../components/postContext';\n\nexport default class MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n\n      return { pageProps };\n    }\n\n    const postsResponse = await axios.get(\n      'http://www.mocky.io/v2/5be5e3fa2f000082000fc3f8'\n    );\n    const authorResponse = await axios.get(\n      'http://www.mocky.io/v2/5be5e3ae2f00005b000fc3f6'\n    );\n\n    const allPosts = postsResponse.data.map(a =>\n      Object.assign(\n        a,\n        authorResponse.data.find(b => b.id === a.metadata.authorId)\n      )\n    );\n\n    let authors = allPosts.map(a => a.name);\n\n    authors = authors.filter(\n      (li, idx, self) => self.map(itm => itm + itm).indexOf(li + li) === idx\n    );\n\n    const lastPosts = allPosts.slice(0, 3).map(a => a);\n\n    const lastPost = allPosts.slice(0, 1).map(a => a)[0];\n\n    const spotLight = allPosts.slice(0, 1).map(a => a)[0];\n\n    return { pageProps, allPosts, authors, lastPosts, lastPost, spotLight };\n  }\n\n  render() {\n    const [filter, setFilter] = useState('');\n\n    const {\n      Component,\n      pageProps,\n      allPosts,\n      authors,\n      lastPosts,\n      lastPost,\n      spotLight,\n    } = this.props;\n\n    return (\n      <>\n        <GlobalStyle />\n        <postContext.Provider\n          value={{\n            allPosts,\n            authors,\n            lastPosts,\n            lastPost,\n            spotLight,\n            filter,\n            setFilter,\n          }}\n        >\n          <Header />\n          <Component {...pageProps} />\n          <Newsletter />\n          <Footer />\n        </postContext.Provider>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}