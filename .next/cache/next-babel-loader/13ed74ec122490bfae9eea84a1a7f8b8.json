{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable react/jsx-props-no-spreading */\n\n/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport axios from 'axios';\nexport default (() => Composed => class extends Component {\n  static async getInitialProps(ctx) {\n    let pageProps = {};\n\n    if (Composed.getInitialProps) {\n      pageProps = await loadGetInitialProps(Composed, ctx);\n    }\n\n    const postsResponse = await axios.get('http://www.mocky.io/v2/5be5e3fa2f000082000fc3f8');\n    const authorResponse = await axios.get('http://www.mocky.io/v2/5be5e3ae2f00005b000fc3f6');\n    const posts = postsResponse.data.map(a => Object.assign(a, authorResponse.data.find(b => b.id === a.authorId)));\n    console.log('dsfsadfasdf');\n    return {\n      pageProps: _objectSpread({}, pageProps, {\n        posts\n      })\n    };\n  }\n\n  render() {\n    const {\n      pageProps\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Composed, pageProps));\n  }\n\n});","map":{"version":3,"sources":["/home/guisouzanl/Projetos/blog-pessoal/src/hocs/withPosts.js"],"names":["React","Component","loadGetInitialProps","axios","Composed","getInitialProps","ctx","pageProps","postsResponse","get","authorResponse","posts","data","map","a","Object","assign","find","b","id","authorId","console","log","render","props"],"mappings":";;;;;;;;AAAA;;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,gBAAe,MAAMC,QAAQ,IAC3B,cAAcH,SAAd,CAAwB;AACtB,eAAaI,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAIH,QAAQ,CAACC,eAAb,EAA8B;AAC5BE,MAAAA,SAAS,GAAG,MAAML,mBAAmB,CAACE,QAAD,EAAWE,GAAX,CAArC;AACD;;AAED,UAAME,aAAa,GAAG,MAAML,KAAK,CAACM,GAAN,CAC1B,iDAD0B,CAA5B;AAIA,UAAMC,cAAc,GAAG,MAAMP,KAAK,CAACM,GAAN,CAC3B,iDAD2B,CAA7B;AAIA,UAAME,KAAK,GAAGH,aAAa,CAACI,IAAd,CAAmBC,GAAnB,CAAuBC,CAAC,IACpCC,MAAM,CAACC,MAAP,CACEF,CADF,EAEEJ,cAAc,CAACE,IAAf,CAAoBK,IAApB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASL,CAAC,CAACM,QAAzC,CAFF,CADY,CAAd;AAOAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEA,WAAO;AAAEf,MAAAA,SAAS,oBAAOA,SAAP;AAAkBI,QAAAA;AAAlB;AAAX,KAAP;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA;AAAF,QAAgB,KAAKiB,KAA3B;AAEA,WACE,4BACE,MAAC,QAAD,EAAcjB,SAAd,CADF,CADF;AAKD;;AApCqB,CAD1B","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport React, { Component } from 'react';\nimport { loadGetInitialProps } from 'next/dist/next-server/lib/utils';\nimport axios from 'axios';\n\nexport default () => Composed =>\n  class extends Component {\n    static async getInitialProps(ctx) {\n      let pageProps = {};\n\n      if (Composed.getInitialProps) {\n        pageProps = await loadGetInitialProps(Composed, ctx);\n      }\n\n      const postsResponse = await axios.get(\n        'http://www.mocky.io/v2/5be5e3fa2f000082000fc3f8'\n      );\n\n      const authorResponse = await axios.get(\n        'http://www.mocky.io/v2/5be5e3ae2f00005b000fc3f6'\n      );\n\n      const posts = postsResponse.data.map(a =>\n        Object.assign(\n          a,\n          authorResponse.data.find(b => b.id === a.authorId)\n        )\n      );\n\n      console.log('dsfsadfasdf');\n\n      return { pageProps: { ...pageProps, posts } };\n    }\n\n    render() {\n      const { pageProps } = this.props;\n\n      return (\n        <>\n          <Composed {...pageProps} />\n        </>\n      );\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}